package com.zenixia.plugins.hexiagon.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.zenixia.plugins.hexiagon.model.Favorite;
import com.zenixia.plugins.hexiagon.model.FavoriteModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Favorite service. Represents a row in the &quot;Hexiagon_Favorite&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.zenixia.plugins.hexiagon.model.FavoriteModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FavoriteImpl}.
 * </p>
 *
 * @author guillaumelenoir
 * @see FavoriteImpl
 * @see com.zenixia.plugins.hexiagon.model.Favorite
 * @see com.zenixia.plugins.hexiagon.model.FavoriteModel
 * @generated
 */
public class FavoriteModelImpl extends BaseModelImpl<Favorite>
    implements FavoriteModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a favorite model instance should use the {@link com.zenixia.plugins.hexiagon.model.Favorite} interface instead.
     */
    public static final String TABLE_NAME = "Hexiagon_Favorite";
    public static final Object[][] TABLE_COLUMNS = {
            { "favoriteId", Types.BIGINT },
            { "announcementId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "userId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table Hexiagon_Favorite (favoriteId LONG not null primary key,announcementId LONG,companyId LONG,groupId LONG,userId LONG)";
    public static final String TABLE_SQL_DROP = "drop table Hexiagon_Favorite";
    public static final String ORDER_BY_JPQL = " ORDER BY favorite.favoriteId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Hexiagon_Favorite.favoriteId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.zenixia.plugins.hexiagon.model.Favorite"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.zenixia.plugins.hexiagon.model.Favorite"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.zenixia.plugins.hexiagon.model.Favorite"),
            true);
    public static long ANNOUNCEMENTID_COLUMN_BITMASK = 1L;
    public static long GROUPID_COLUMN_BITMASK = 2L;
    public static long USERID_COLUMN_BITMASK = 4L;
    public static long FAVORITEID_COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.zenixia.plugins.hexiagon.model.Favorite"));
    private static ClassLoader _classLoader = Favorite.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Favorite.class
        };
    private long _favoriteId;
    private long _announcementId;
    private long _originalAnnouncementId;
    private boolean _setOriginalAnnouncementId;
    private long _companyId;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private long _userId;
    private String _userUuid;
    private long _originalUserId;
    private boolean _setOriginalUserId;
    private long _columnBitmask;
    private Favorite _escapedModel;

    public FavoriteModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _favoriteId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setFavoriteId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _favoriteId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Favorite.class;
    }

    @Override
    public String getModelClassName() {
        return Favorite.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("favoriteId", getFavoriteId());
        attributes.put("announcementId", getAnnouncementId());
        attributes.put("companyId", getCompanyId());
        attributes.put("groupId", getGroupId());
        attributes.put("userId", getUserId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long favoriteId = (Long) attributes.get("favoriteId");

        if (favoriteId != null) {
            setFavoriteId(favoriteId);
        }

        Long announcementId = (Long) attributes.get("announcementId");

        if (announcementId != null) {
            setAnnouncementId(announcementId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }
    }

    @Override
    public long getFavoriteId() {
        return _favoriteId;
    }

    @Override
    public void setFavoriteId(long favoriteId) {
        _favoriteId = favoriteId;
    }

    @Override
    public long getAnnouncementId() {
        return _announcementId;
    }

    @Override
    public void setAnnouncementId(long announcementId) {
        _columnBitmask |= ANNOUNCEMENTID_COLUMN_BITMASK;

        if (!_setOriginalAnnouncementId) {
            _setOriginalAnnouncementId = true;

            _originalAnnouncementId = _announcementId;
        }

        _announcementId = announcementId;
    }

    public long getOriginalAnnouncementId() {
        return _originalAnnouncementId;
    }

    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _columnBitmask |= USERID_COLUMN_BITMASK;

        if (!_setOriginalUserId) {
            _setOriginalUserId = true;

            _originalUserId = _userId;
        }

        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    public long getOriginalUserId() {
        return _originalUserId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Favorite.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Favorite toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Favorite) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        FavoriteImpl favoriteImpl = new FavoriteImpl();

        favoriteImpl.setFavoriteId(getFavoriteId());
        favoriteImpl.setAnnouncementId(getAnnouncementId());
        favoriteImpl.setCompanyId(getCompanyId());
        favoriteImpl.setGroupId(getGroupId());
        favoriteImpl.setUserId(getUserId());

        favoriteImpl.resetOriginalValues();

        return favoriteImpl;
    }

    @Override
    public int compareTo(Favorite favorite) {
        long primaryKey = favorite.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Favorite)) {
            return false;
        }

        Favorite favorite = (Favorite) obj;

        long primaryKey = favorite.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        FavoriteModelImpl favoriteModelImpl = this;

        favoriteModelImpl._originalAnnouncementId = favoriteModelImpl._announcementId;

        favoriteModelImpl._setOriginalAnnouncementId = false;

        favoriteModelImpl._originalGroupId = favoriteModelImpl._groupId;

        favoriteModelImpl._setOriginalGroupId = false;

        favoriteModelImpl._originalUserId = favoriteModelImpl._userId;

        favoriteModelImpl._setOriginalUserId = false;

        favoriteModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Favorite> toCacheModel() {
        FavoriteCacheModel favoriteCacheModel = new FavoriteCacheModel();

        favoriteCacheModel.favoriteId = getFavoriteId();

        favoriteCacheModel.announcementId = getAnnouncementId();

        favoriteCacheModel.companyId = getCompanyId();

        favoriteCacheModel.groupId = getGroupId();

        favoriteCacheModel.userId = getUserId();

        return favoriteCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{favoriteId=");
        sb.append(getFavoriteId());
        sb.append(", announcementId=");
        sb.append(getAnnouncementId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("com.zenixia.plugins.hexiagon.model.Favorite");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>favoriteId</column-name><column-value><![CDATA[");
        sb.append(getFavoriteId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>announcementId</column-name><column-value><![CDATA[");
        sb.append(getAnnouncementId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
