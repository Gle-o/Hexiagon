package com.gleo.plugins.hexiagon.service.base;

import com.gleo.plugins.hexiagon.model.Currency;
import com.gleo.plugins.hexiagon.service.CurrencyLocalService;
import com.gleo.plugins.hexiagon.service.persistence.AnnouncementImagePersistence;
import com.gleo.plugins.hexiagon.service.persistence.AnnouncementPersistence;
import com.gleo.plugins.hexiagon.service.persistence.CurrencyPersistence;
import com.gleo.plugins.hexiagon.service.persistence.FavoritePersistence;
import com.gleo.plugins.hexiagon.service.persistence.TypePersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the currency local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.gleo.plugins.hexiagon.service.impl.CurrencyLocalServiceImpl}.
 * </p>
 *
 * @author guillaumelenoir
 * @see com.gleo.plugins.hexiagon.service.impl.CurrencyLocalServiceImpl
 * @see com.gleo.plugins.hexiagon.service.CurrencyLocalServiceUtil
 * @generated
 */
public abstract class CurrencyLocalServiceBaseImpl extends BaseLocalServiceImpl
    implements CurrencyLocalService, IdentifiableBean {
    @BeanReference(type = com.gleo.plugins.hexiagon.service.AnnouncementLocalService.class)
    protected com.gleo.plugins.hexiagon.service.AnnouncementLocalService announcementLocalService;
    @BeanReference(type = com.gleo.plugins.hexiagon.service.AnnouncementService.class)
    protected com.gleo.plugins.hexiagon.service.AnnouncementService announcementService;
    @BeanReference(type = AnnouncementPersistence.class)
    protected AnnouncementPersistence announcementPersistence;
    @BeanReference(type = com.gleo.plugins.hexiagon.service.AnnouncementImageLocalService.class)
    protected com.gleo.plugins.hexiagon.service.AnnouncementImageLocalService announcementImageLocalService;
    @BeanReference(type = AnnouncementImagePersistence.class)
    protected AnnouncementImagePersistence announcementImagePersistence;
    @BeanReference(type = com.gleo.plugins.hexiagon.service.CurrencyLocalService.class)
    protected com.gleo.plugins.hexiagon.service.CurrencyLocalService currencyLocalService;
    @BeanReference(type = com.gleo.plugins.hexiagon.service.CurrencyService.class)
    protected com.gleo.plugins.hexiagon.service.CurrencyService currencyService;
    @BeanReference(type = CurrencyPersistence.class)
    protected CurrencyPersistence currencyPersistence;
    @BeanReference(type = com.gleo.plugins.hexiagon.service.FavoriteLocalService.class)
    protected com.gleo.plugins.hexiagon.service.FavoriteLocalService favoriteLocalService;
    @BeanReference(type = FavoritePersistence.class)
    protected FavoritePersistence favoritePersistence;
    @BeanReference(type = com.gleo.plugins.hexiagon.service.TypeLocalService.class)
    protected com.gleo.plugins.hexiagon.service.TypeLocalService typeLocalService;
    @BeanReference(type = com.gleo.plugins.hexiagon.service.TypeService.class)
    protected com.gleo.plugins.hexiagon.service.TypeService typeService;
    @BeanReference(type = TypePersistence.class)
    protected TypePersistence typePersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private CurrencyLocalServiceClpInvoker _clpInvoker = new CurrencyLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link com.gleo.plugins.hexiagon.service.CurrencyLocalServiceUtil} to access the currency local service.
     */

    /**
     * Adds the currency to the database. Also notifies the appropriate model listeners.
     *
     * @param currency the currency
     * @return the currency that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Currency addCurrency(Currency currency) throws SystemException {
        currency.setNew(true);

        return currencyPersistence.update(currency);
    }

    /**
     * Creates a new currency with the primary key. Does not add the currency to the database.
     *
     * @param currencyId the primary key for the new currency
     * @return the new currency
     */
    @Override
    public Currency createCurrency(long currencyId) {
        return currencyPersistence.create(currencyId);
    }

    /**
     * Deletes the currency with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param currencyId the primary key of the currency
     * @return the currency that was removed
     * @throws PortalException if a currency with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Currency deleteCurrency(long currencyId)
        throws PortalException, SystemException {
        return currencyPersistence.remove(currencyId);
    }

    /**
     * Deletes the currency from the database. Also notifies the appropriate model listeners.
     *
     * @param currency the currency
     * @return the currency that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Currency deleteCurrency(Currency currency) throws SystemException {
        return currencyPersistence.remove(currency);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(Currency.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return currencyPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.gleo.plugins.hexiagon.model.impl.CurrencyModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return currencyPersistence.findWithDynamicQuery(dynamicQuery, start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.gleo.plugins.hexiagon.model.impl.CurrencyModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return currencyPersistence.findWithDynamicQuery(dynamicQuery, start,
            end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return currencyPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return currencyPersistence.countWithDynamicQuery(dynamicQuery,
            projection);
    }

    @Override
    public Currency fetchCurrency(long currencyId) throws SystemException {
        return currencyPersistence.fetchByPrimaryKey(currencyId);
    }

    /**
     * Returns the currency with the primary key.
     *
     * @param currencyId the primary key of the currency
     * @return the currency
     * @throws PortalException if a currency with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Currency getCurrency(long currencyId)
        throws PortalException, SystemException {
        return currencyPersistence.findByPrimaryKey(currencyId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return currencyPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the currencies.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.gleo.plugins.hexiagon.model.impl.CurrencyModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of currencies
     * @param end the upper bound of the range of currencies (not inclusive)
     * @return the range of currencies
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<Currency> getCurrencies(int start, int end)
        throws SystemException {
        return currencyPersistence.findAll(start, end);
    }

    /**
     * Returns the number of currencies.
     *
     * @return the number of currencies
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getCurrenciesCount() throws SystemException {
        return currencyPersistence.countAll();
    }

    /**
     * Updates the currency in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param currency the currency
     * @return the currency that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Currency updateCurrency(Currency currency) throws SystemException {
        return currencyPersistence.update(currency);
    }

    /**
     * Returns the announcement local service.
     *
     * @return the announcement local service
     */
    public com.gleo.plugins.hexiagon.service.AnnouncementLocalService getAnnouncementLocalService() {
        return announcementLocalService;
    }

    /**
     * Sets the announcement local service.
     *
     * @param announcementLocalService the announcement local service
     */
    public void setAnnouncementLocalService(
        com.gleo.plugins.hexiagon.service.AnnouncementLocalService announcementLocalService) {
        this.announcementLocalService = announcementLocalService;
    }

    /**
     * Returns the announcement remote service.
     *
     * @return the announcement remote service
     */
    public com.gleo.plugins.hexiagon.service.AnnouncementService getAnnouncementService() {
        return announcementService;
    }

    /**
     * Sets the announcement remote service.
     *
     * @param announcementService the announcement remote service
     */
    public void setAnnouncementService(
        com.gleo.plugins.hexiagon.service.AnnouncementService announcementService) {
        this.announcementService = announcementService;
    }

    /**
     * Returns the announcement persistence.
     *
     * @return the announcement persistence
     */
    public AnnouncementPersistence getAnnouncementPersistence() {
        return announcementPersistence;
    }

    /**
     * Sets the announcement persistence.
     *
     * @param announcementPersistence the announcement persistence
     */
    public void setAnnouncementPersistence(
        AnnouncementPersistence announcementPersistence) {
        this.announcementPersistence = announcementPersistence;
    }

    /**
     * Returns the announcement image local service.
     *
     * @return the announcement image local service
     */
    public com.gleo.plugins.hexiagon.service.AnnouncementImageLocalService getAnnouncementImageLocalService() {
        return announcementImageLocalService;
    }

    /**
     * Sets the announcement image local service.
     *
     * @param announcementImageLocalService the announcement image local service
     */
    public void setAnnouncementImageLocalService(
        com.gleo.plugins.hexiagon.service.AnnouncementImageLocalService announcementImageLocalService) {
        this.announcementImageLocalService = announcementImageLocalService;
    }

    /**
     * Returns the announcement image persistence.
     *
     * @return the announcement image persistence
     */
    public AnnouncementImagePersistence getAnnouncementImagePersistence() {
        return announcementImagePersistence;
    }

    /**
     * Sets the announcement image persistence.
     *
     * @param announcementImagePersistence the announcement image persistence
     */
    public void setAnnouncementImagePersistence(
        AnnouncementImagePersistence announcementImagePersistence) {
        this.announcementImagePersistence = announcementImagePersistence;
    }

    /**
     * Returns the currency local service.
     *
     * @return the currency local service
     */
    public com.gleo.plugins.hexiagon.service.CurrencyLocalService getCurrencyLocalService() {
        return currencyLocalService;
    }

    /**
     * Sets the currency local service.
     *
     * @param currencyLocalService the currency local service
     */
    public void setCurrencyLocalService(
        com.gleo.plugins.hexiagon.service.CurrencyLocalService currencyLocalService) {
        this.currencyLocalService = currencyLocalService;
    }

    /**
     * Returns the currency remote service.
     *
     * @return the currency remote service
     */
    public com.gleo.plugins.hexiagon.service.CurrencyService getCurrencyService() {
        return currencyService;
    }

    /**
     * Sets the currency remote service.
     *
     * @param currencyService the currency remote service
     */
    public void setCurrencyService(
        com.gleo.plugins.hexiagon.service.CurrencyService currencyService) {
        this.currencyService = currencyService;
    }

    /**
     * Returns the currency persistence.
     *
     * @return the currency persistence
     */
    public CurrencyPersistence getCurrencyPersistence() {
        return currencyPersistence;
    }

    /**
     * Sets the currency persistence.
     *
     * @param currencyPersistence the currency persistence
     */
    public void setCurrencyPersistence(CurrencyPersistence currencyPersistence) {
        this.currencyPersistence = currencyPersistence;
    }

    /**
     * Returns the favorite local service.
     *
     * @return the favorite local service
     */
    public com.gleo.plugins.hexiagon.service.FavoriteLocalService getFavoriteLocalService() {
        return favoriteLocalService;
    }

    /**
     * Sets the favorite local service.
     *
     * @param favoriteLocalService the favorite local service
     */
    public void setFavoriteLocalService(
        com.gleo.plugins.hexiagon.service.FavoriteLocalService favoriteLocalService) {
        this.favoriteLocalService = favoriteLocalService;
    }

    /**
     * Returns the favorite persistence.
     *
     * @return the favorite persistence
     */
    public FavoritePersistence getFavoritePersistence() {
        return favoritePersistence;
    }

    /**
     * Sets the favorite persistence.
     *
     * @param favoritePersistence the favorite persistence
     */
    public void setFavoritePersistence(FavoritePersistence favoritePersistence) {
        this.favoritePersistence = favoritePersistence;
    }

    /**
     * Returns the type local service.
     *
     * @return the type local service
     */
    public com.gleo.plugins.hexiagon.service.TypeLocalService getTypeLocalService() {
        return typeLocalService;
    }

    /**
     * Sets the type local service.
     *
     * @param typeLocalService the type local service
     */
    public void setTypeLocalService(
        com.gleo.plugins.hexiagon.service.TypeLocalService typeLocalService) {
        this.typeLocalService = typeLocalService;
    }

    /**
     * Returns the type remote service.
     *
     * @return the type remote service
     */
    public com.gleo.plugins.hexiagon.service.TypeService getTypeService() {
        return typeService;
    }

    /**
     * Sets the type remote service.
     *
     * @param typeService the type remote service
     */
    public void setTypeService(
        com.gleo.plugins.hexiagon.service.TypeService typeService) {
        this.typeService = typeService;
    }

    /**
     * Returns the type persistence.
     *
     * @return the type persistence
     */
    public TypePersistence getTypePersistence() {
        return typePersistence;
    }

    /**
     * Sets the type persistence.
     *
     * @param typePersistence the type persistence
     */
    public void setTypePersistence(TypePersistence typePersistence) {
        this.typePersistence = typePersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("com.gleo.plugins.hexiagon.model.Currency",
            currencyLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "com.gleo.plugins.hexiagon.model.Currency");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return Currency.class;
    }

    protected String getModelClassName() {
        return Currency.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = currencyPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
